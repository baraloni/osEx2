noystl, baraloni
Noy Sternlicht (205765365), Bar Aloni (305230740)
EX: 2

FILES:
README -- This file.
Makefile -- A file containing a set of directives used by a 
			make build automation tool to generate the uthreads static library.
uthreads.cpp -- A user level threads library.
scheduler.cpp-- Decides which thread to run whenever a context-switch in needed.
thread_manager.cpp -- Keeps the threads created in the library, and handles their inner states.
thread.cpp -- Represents a thread object.
virtual_timer.cpp --  Measures a quantum in virtual time.
real_timer.cpp -- Measures real time according to the user's wish.
sleeping_threads_list.cpp -- A data structure containing all the threads in the state: SLEEP

(and header files for all files mentioned above, but uthreads).

REMARKS:


ANSWERS:
1)
One general use of user-level threads is to expend the functionality of operating systems that
don't support threading, don't implement kernel level threads.
User-level threads are a reasonable choice for this example because
it allows the user to simulate multi threading on an OS that don't deliver this functionality.

2)
    ADVANTEGES
- More secure: When Chrome is using different processes for different tabs,
it is more likely that what happens in one tab would not affect other tabs.
This is happening since the OS separates the processes from each other:
each process has a separate address space, different code, different files and different data.
In that way, If something bad happens in one tab it won't harm the other tabs.

    DISADVANTAGES
- Memory wasteful: The tabs are probably all using the same code, but since processes
  should be isolated, each of them is holding a separate copy of the code, which costs more memory.
- Communication is costly: communication between processes has high overhead,
  so it will be expensive for one tab to communicate with other tabs.

3)
First of all, as we type on the keyboard we are sending an interrupt from the I/O device.
The system gets the interrupt, evaluates the character given and causes the shell to present it
on screen. This cycle keeps on going until we press "enter" which causes an interrupt to be sent
to the OS, telling it to execute the system call: "kill <pid>".
When sending kill the default signal that is being sent is SIGTERM: a signal that gives the process
the opportunity to handle the closing.

4)
Real-time is always counted (like real world time). Virtual-time, however,
is counted only when the process is executing.
For example, if we want to build a stop-watch application it is more likely that we'll
want to use real-time to measure time (since users will be using it to measure real world time).
However, if we'll want to build a productivity app that, lets say, limits the time the user
spends on Youtube, we will want to use virtual time to measure it, since we are interested only
in the time the process running Youtube's tab is active.